In this post I summarizes my main argument about a recurrent discussion we have with colleagues about _software reuse_. The concept of _software reuse_ is not new and many writings already exist about this. Probably the better I've read so far is _Software Reuse_ from Charles W. Krueger[1], published in ... 1992. The abstract of the paper starts with the following paragraph:

bq. Software reuse is the process of creating software systems from existing software rather than building software systems from scratch. This simple yet powerful vision was introduced in 1968. Software reuse has, however, failed to become a standard software engineering practice. In an attempt to understand why, researchers have renewed their interest in software reuse and in the obstacles to implementing it. 

In 2011, I would certainly not argue that software reuse is not a standard practice because things have evolved, fortunately. However, from my personal experience I strongly feel that something is still wrong in here...

h3. Situation in 1992 

The paper mentionned above is actually a review of the research effors at that time about _reuse techniques_. The paper discusses the ``software abstractions'' that each of these techniques introduces. Also, it classifies them according to the way such abstractions are _selected_, _specialized_ and then _integrated_ when the reusing process takes place. Interestingly, the paper calls for gauging the effectiveness of such abstractions in terms of _cognitive distance_, that is, in terms of the _intellectual effort required (by software developers) to use them_. Abstractions discussed in the body of the paper are:

bq. _high-level languages_, _design and code scavenging_, _source code components_, _software schemas_, _application generators_, _very high-level languages_, _transformational systems_ and _software architectures_.

Some of these abstractions are well known nowadays (who doesn't know about _high-level languages_ and _software architectures_?, to take a trivial example) while others are probably less known, such a fact being maybe representative of a natural selection process.

h3. References

fn1. Charles W. Krueger, _Software Reuse_, ACM Computing Surveys, Volume 24 Issue 2, June 1992

 